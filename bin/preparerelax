#!/usr/local/bin/php
<?php

$self   = __FILE__;
$selfd  = dirname( $self );
$cgbase = "charmm-gui/namd";

if ( count( $argv ) != 2 ) {
    echo '{"error":"$self requires a JSON input object"}';
    exit;
}

$json_input = $argv[1];

$input = json_decode( $json_input );

if ( !$input ) {
    echo '{"error":"$self - invalid JSON."}';
    exit;
}

$output = (object)[];
$output->_textarea = "";

include "genapp.php";
include "datetime.php";

$ga = new GenApp( $input, $output );
$fdir = preg_replace( "/^.*\/results\//", "results/", $input->_base_directory );

## process inputs here to produce output

## get state

require "common.php";
$cgstate = new cgrun_state();

## make sure "loaded"

## is this a proper project that has been "load"'d

if ( !$cgstate->state->loaded ) {
    echo '{"_message":{"icon":"information.png","text":"The current project <i>' . $input->_project . '</i> is not ready for equilibration,<br>Did you <i>load</i> it yet?<br>You can change projects in user configuration (top right)"}}';
    exit;
}

## are the expected directories present?
if ( !is_dir( $cgbase ) ) {
    echo '{"_message":{"icon":"toast.png","text":"The directory <i>$cgbase</i> does not exist. You will need to run <i>Load</i> again"}}';
    exit;
}
 
### are the needeed dependencies present
$dependencies =
    [
     "$cgbase/step3_input.pdb"
     ,"$cgbase/step3_input.psf"
     ,"$cgbase/step4_equilibration.inp"
     ,"$cgbase/../step3_pbcsetup.str"
    ];

foreach ( $dependencies as $v ) {
    if ( !file_exists( $v ) ) {
        error_exit( "The current project <i>$input->_project</i> is missing expected file <i>$v</i>.<br>Either the loaded file is incorrect, CHARMM-gui has changed how it creates NAMD output or the file was removed after loading.$msg_admin" );
    }
}

## check if already run
## could add additional file checks - but probably not needed - the state variable should be sufficient
if ( isset( $cgstate->state->preparerelax ) && $cgstate->state->preparerelax ) {
    $response =
        json_decode(
            $ga->tcpquestion(
                [
                 "id"           => "q1"
                 ,"title"       => "<h5>Project '$input->_project' has previous equilibration results</h5>"
                 ,"icon"        => "warning.png"
                 ,"text"        => ""
                 ,"timeouttext" => "The time to respond has expired, please submit again."
                 ,"buttons"     => [ "Erase previous results", "Cancel" ]
                 ,"fields" => [
                     [
                      "id"          => "l1"
                      ,"type"       => "label"
                      ,"label"      => "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Previous results will be overwritten!"
                      ,"align"      => "center"
                     ]
                 ]
                ]

            )
        );

    if ( $response->_response->button == "cancel" ) {
        echo '{"_message":{"icon":"information.png","text":"Canceled"}}';
        exit;
    }
}

unset( $cgstate->state->preparerelax );
if ( !$cgstate->save() ) {
    error_exit( "Save state failed:' . $cgstate->errors . '");
}

run_cmd( "cd $cgbase && rm -fr solmin_???.inp solmin", false );

## get max non-solvent atoms

$maxatoms = intval( run_cmd( "grep -P '^ATOM' $cgbase/step3_input.pdb | awk '{ print substr(\$0,73,4) \" \" substr(\$0,7,5) }'  | grep -Pv '^(IONS|SOLV)' | tail -1 | awk '{ print \$2 }'" ) );
$ga->tcpmessage( [ "_textarea" => "Number of non solvent atoms: $maxatoms\n" ] );

## get pcbsetup

$pbcsetup = strtolower( run_cmd( "cd $cgbase && cat ../step3_pbcsetup.str | sed -e 's/ =//g'" ) );
$ga->tcpmessage( [ "_textarea" => "pbcsetup:\n$pbcsetup\n" ] );

## build prep files as in cg_namd_setup.pl

## all expected results, stage_inputs, stage_outputs
$expected_results = [
    "$cgbase/solmin/step3_input.somo_f_pa_c.pdb"
    ,"$cgbase/solmin_000.inp"
    ,"$cgbase/solmin/step3_input.somo_f_pa.pdb"
    ,"$cgbase/solmin_001.inp"
    ,"$cgbase/solmin/step3_input.somo_f_pbba_coc_000.pdb"
    ,"$cgbase/solmin_002.inp"
    ];

## solmin specific

$solmin_inputs = [
    "step3_input.pdb"
    ,"solmin/min1_f_pa_c.coor"
    ,"solmin/min1_f_pa.coor"
    ];
    
$solmin_outputs = [
    "solmin/min1_f_pa_c"
    ,"solmin/min1_f_pa"
    ,"solmin/min1_f_pbba_coc_000"
    ];

$solmin_faf = [
    "solmin/step3_input.somo_f_pa_c.pdb"
    ,"solmin/step3_input.somo_f_pa.pdb"
    ,"solmin/step3_input.somo_f_pbba_coc_000.pdb"
    ];

$solmin_jobs = [
    "solmin_000.inp"
    ,"solmin_001.inp"
    ,"solmin_002.inp"
    ];

$solmin_minimization_steps = [
    $input->minsteps_solv
    ,$input->minsteps_carb
    ,$input->minsteps_coci
    ];

$solmin_firsttimesteps = [
    0
    ,$input->minsteps_solv
    ,$input->minsteps_carb + $input->minsteps_solv
    ];

for ( $i = 1; $i < $input->cocrounds; ++$i ) {
    foreach ( [
                  sprintf( "$cgbase/solmin/step3_input.somo_f_pbba_coc_%s.pdb", str_pad( $i - 1, 3, '0', STR_PAD_LEFT ) )
                  ,sprintf( "$cgbase/solmin_%s.inp", str_pad( $i + 1, 3, '0', STR_PAD_LEFT ) )
              ] as $expected_result ) {
        $expected_results[] = $expected_result;
    }
    $solmin_inputs[]             = sprintf( "solmin/min1_f_pbba_coc_%s.coor", str_pad( $i - 1, 3, '0', STR_PAD_LEFT ) );
    $solmin_outputs[]            = sprintf( "solmin/min1_f_pbba_coc_%s", str_pad( $i, 3, '0', STR_PAD_LEFT ) );
    $solmin_faf[]                = sprintf( "solmin/step3_input.somo_f_pbba_coc_%s.pdb", str_pad( $i, 3, '0', STR_PAD_LEFT ) );
    $solmin_jobs[]               = sprintf( "solmin_%s.inp", str_pad( $i + 2, 3, '0', STR_PAD_LEFT ) );
    $solmin_minimization_steps[] = $input->minsteps_coci;
    $solmin_firsttimesteps[]     = end( $solmin_firsttimesteps ) + $input->minsteps_coci;
}

## fix up final solmin steps
$solmin_minimization_steps[ array_key_last( $solmin_minimization_steps ) ] = $input->minsteps_final;

## add equilibration
if ( $input->equilibration_steps > 0 ) {
    $expected_results[]          = "$cgbase/solmin_equilibrate.inp";
    $solmin_inputs[]             = sprintf( "solmin/min1_f_pbba_coc_%s.coor", str_pad( $input->cocrounds - 1, 3, '0', STR_PAD_LEFT ) );
    $solmin_outputs[]            = "solmin/equilibrated";
    $solmin_jobs[]               = "solmin_equilibrate.inp";
    $solmin_minimization_steps[] = $input->equilibration_steps;
    $solmin_firsttimesteps[]     = end( $solmin_firsttimesteps ) + $input->minsteps_final;
}

$ga->tcpmessage( [ "_textarea" =>
                   "expected_results:\n" . implode( "\n", $expected_results ) . "\n"
                   . "solmin_inputs:\n" . implode( "\n", $solmin_inputs ) . "\n"
                   . "solmin_outputs:\n" . implode( "\n", $solmin_outputs ) . "\n"
                   . "solmin_faf:\n" . implode( "\n", $solmin_faf ) . "\n"
                   . "solmin_jobs:\n" . implode( "\n", $solmin_jobs ) . "\n"
                   . "solmin_minimization_steps:\n" . implode( "\n", $solmin_minimization_steps ) . "\n"
                   . "solmin_firsttimesteps:\n" . implode( "\n", $solmin_firsttimesteps ) . "\n"
                 ] );

$mdutils = "$selfd/mdutil";

### let's keep directories as in cg_namd_setup.pl for now, perhaps change later

$vacuumd  = "$cgbase/vacuumd";
$solmind  = "$cgbase/solmin";

if ( !mkdir_if_needed( $vacuumd ) ) {
    error_exit( "The directory <i>$vacuumd</i> could not be created.$msg_admin" );
    exit;
}

if ( !mkdir_if_needed( $solmind ) ) {
    error_exit( "The directory <i>$solmind</i> could not be created.$msg_admin" );
}

$refpdb_exists =
    isset( $cgstate->state->refpdb )
    && is_array( $cgstate->state->refpdb )
    && count( $cgstate->state->refpdb )
    ;
            
$cmds = [];

foreach ( [
              "cd $vacuumd && cp ../step3_input.pdb ."
              ,"cd $vacuumd && cp ../step3_input.psf ."
              ,"cd $vacuumd && $mdutils/pdbcutwi.pl step3_input.pdb"
              ,"cd $vacuumd && $mdutils/somopdb.pl step3_input.pdb"
    ] as $cmd ) {
    $cmds[] = $cmd;
}

if ( $refpdb_exists ) {
    $cmds[] = "cd $vacuumd && $mdutils/pdbhelixsheet.pl step3_input.somo.pdb " . $cgstate->state->refpdb[0];
}

foreach ( [
              "cd $vacuumd && $mdutils/restraints.pl step3_input.somo.pdb"
              ,"cd $vacuumd && $mdutils/restraintscoc.pl step3_input.somo.pdb $input->cocrounds"
              ,"cd $vacuumd && $mdutils/psfcut.pl step3_input.psf $maxatoms"
              ,"cd $solmind && cp ../step3_input.pdb ."
              ,"cd $solmind && cp ../step3_input.psf ."
              ,"cd $solmind && $mdutils/somopdb.pl step3_input.pdb"
          ] as $cmd ) {
    $cmds[] = $cmd;
}    

if ( $refpdb_exists ) {
    $cmds[] = "cd $solmind && $mdutils/pdbhelixsheet.pl step3_input.somo.pdb " . $cgstate->state->refpdb[0];
}
    
foreach( [
             "cd $solmind && $mdutils/restraints.pl step3_input.somo.pdb"
             ,"cd $solmind && $mdutils/restraintscoc.pl step3_input.somo.pdb $input->cocrounds"
         ] as $cmd ) {
    $cmds[] = $cmd;
}    


## $ga->tcpmessage( [ "_textarea" => "cmds:\n" . implode( "\n", $cmds ) . "\n" ] );

$step = 0;

foreach ( $cmds as $cmd ) {
    $ga->tcpmessage( [ "_textarea" => "Running: $cmd\n" ] );
    $res = run_cmd( "umask 002 && $cmd" );
    $ga->tcpmessage( [
                         "_textarea" => "Output:\n$res\n"
                         ,"_progress" => ++$step / count( $cmds )
                     ]);
}

## make inp files

$inplines = explode( "\n", file_get_contents( "$cgbase/step4_equilibration.inp" ) );

$inpnew = preg_replace(
    [
     '/^((constraints|consexp|consref|conskfile|conskcol|minimize|numsteps|run|set outputname|outputName).*)$/i'
     ,'/^coordinates.*$/i'
     ,'/^firsttimestep.*$/i'
     ,'/^dcdfreq.*$/i'
    ],
    [
     "# $0"
     ,"coordinates             __input_name__"
     ,"firsttimestep           __firsttimestep__;"
     ,"dcdfreq                 $input->dcdfreq;"
    ]
    ,$inplines
    );
if ( count( $inplines ) != count( $inpnew ) ) {
    echo '{"_message":{"icon":"toast.png","text":"Error replacing values in input script<br>Try <i>load</i> again.$msg_admin"}}';
    exit;
}

foreach ( [
              "# fixed atoms"
              ,"# restraints"
              ,"fixedAtoms              on"
              ,"fixedAtomsForces        on"
              ,"fixedAtomsFile          __fixed_atoms_file__"
              ,"fixedAtomsCol           B"
              ,""
              ,"# output"
              ,"outputname              __output_name__"
              ,"binaryoutput            no"
              ,""
              ,"# run control"
              ,""
              ,"minimize                __minimize_steps__"
          ] as $addline ) {
    $inpnew[] = $addline;
}

for ( $i = 0; $i < count( $solmin_jobs ); ++$i ) {
    $inpoutput = preg_replace(
        [
         "/__input_name__/"
         ,"/__firsttimestep__/"
         ,"/__fixed_atoms_file__/"
         ,"/__output_name__/"
         ,"/__minimize_steps__/"
        ]
        ,
        [
         $solmin_inputs[$i]
         ,$solmin_firsttimesteps[$i]
         ,$solmin_faf[$i]
         ,$solmin_outputs[$i]
         ,$solmin_minimization_steps[$i]
        ]
        ,$inpnew
        );
    file_put_contents( "$cgbase/$solmin_jobs[$i]", implode( "\n", $inpoutput ) . "\n" );
    chmod( "$cgbase/$solmin_jobs[$i]", 0660 );
}

## add equilibration
if ( $input->equilibration_steps > 0 ) {
    # start again from original step4_equilibration.inp

    $inpnew = preg_replace(
        [
         '/^((minimize|numsteps|run|set outputname|outputName).*)$/i'
         ,'/^coordinates.*$/i'
         ,'/^firsttimestep.*$/i'
         ,'/^dcdfreq.*$/i'
        ],
        [
         "# $0"
         ,"coordinates             " . end( $solmin_inputs )
         ,"firsttimestep           " . end( $solmin_firsttimesteps )
         ,"dcdfreq                 $input->dcdfreq;"
        ]
        ,$inplines
        );
    if ( count( $inplines ) != count( $inpnew ) ) {
        echo '{"_message":{"icon":"toast.png","text":"Error replacing values in input script<br>Try <i>load</i> again.$msg_admin"}}';
        exit;
    }

    foreach ( [
                  "# output"
                  ,"outputname              " . end( $solmin_outputs )
                  ,""
                  ,"# run control"
                  ,""
                  ,"run                     " . $input->equilibration_steps
              ] as $addline ) {
        $inpnew[] = $addline;
    }

    file_put_contents( "$cgbase/" . end( $solmin_jobs ), implode( "\n", $inpnew ) . "\n" );
}

## verify expected results

$missing_results = [];
foreach ( $expected_results as $expected_result ) {
    if ( !file_exists( $expected_result ) ) {
        $missing_results[] = $expected_result;
    }
}

if ( count( $missing_results ) ) {
    error_exit( "There is some error, the following files were expected to be produced but were not found:<br>" . implode( "<br>", $missing_results ) );
}

$output->_textarea .= "\nPREPARE complete\n";

## save state

$cgstate->state->preparerelax               = true;
$cgstate->state->vacuum_ready               = false;
$cgstate->state->solmin_ready               = true;
$cgstate->state->maxatoms                   = $maxatoms;
$cgstate->state->solmin_jobs                = $solmin_jobs;
$cgstate->state->solmin_outputs             = $solmin_outputs;
$cgstate->state->solmin_minimization_steps  = $solmin_minimization_steps; array_pop( $cgstate->state->solmin_minimization_steps );
$cgstate->state->solmin_equilibration_steps = $input->equilibration_steps;
$cgstate->state->solmin_temperature         = $input->temperature;

if ( !$cgstate->save() ) {
    error_exit( "Save state failed:' . $cgstate->errors . '");
}

## log results to textarea

$output->{'_textarea'} = "JSON output from executable:\n" . json_encode( $output, JSON_PRETTY_PRINT ) . "\n";
$output->{'_textarea'} .= "JSON input from executable:\n"  . json_encode( $input, JSON_PRETTY_PRINT )  . "\n";

echo json_encode( $output );
