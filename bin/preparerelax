#!/usr/local/bin/php
<?php

$self   = __FILE__;
$selfd  = dirname( $self );
$cgbase = "charmm-gui/namd";

if ( count( $argv ) != 2 ) {
    echo '{"error":"$self requires a JSON input object"}';
    exit;
}

$json_input = $argv[1];

$input = json_decode( $json_input );

if ( !$input ) {
    echo '{"error":"$self - invalid JSON."}';
    exit;
}

$output = (object)[];
$output->_textarea = "";

include "genapp.php";
include "datetime.php";

$ga = new GenApp( $input, $output );
$fdir = preg_replace( "/^.*\/results\//", "results/", $input->_base_directory );

## process inputs here to produce output

## get state

require "common.php";
$cgstate = new cgrun_state();

## make sure "loaded"

## is this a proper project that has been "load"'d

if ( !$cgstate->state->loaded ) {
    echo '{"_message":{"icon":"information.png","text":"The current project <i>' . $input->_project . '</i> is not ready for equilibration,<br>Did you <i>load</i> it yet?<br>You can change projects in user configuration (top right)"}}';
    exit;
}

## are the expected directories present?
if ( !is_dir( $cgbase ) ) {
    echo '{"_message":{"icon":"toast.png","text":"The directory <i>$cgbase</i> does not exist. You will need to run <i>Load</i> again"}}';
    exit;
}
 
### are the needeed dependencies present
$dependencies =
    [
     "$cgbase/step3_input.pdb"
     ,"$cgbase/step3_input.psf"
     ,"$cgbase/../step3_pbcsetup.str"
    ];

foreach ( $dependencies as $v ) {
    if ( !file_exists( $v ) ) {
        error_exit( "The current project <i>$input->_project</i> is missing expected file <i>$v</i>.<br>Either the loaded file is incorrect, CHARMM-gui has changed how it creates NAMD output or the file was removed after loading.$msg_admin" );
    }
}

## get max non-solvent atoms

$maxatoms = intval( run_cmd( "grep -P '^ATOM' $cgbase/step3_input.pdb | awk '{ print substr(\$0,73,4) \" \" substr(\$0,7,5) }'  | grep -Pv '^(IONS|SOLV)' | tail -1 | awk '{ print \$2 }'" ) );
$ga->tcpmessage( [ "_textarea" => "Number of non solvent atoms: $maxatoms\n" ] );

## get pcbsetup

$pbcsetup = strtolower( run_cmd( "cd $cgbase && cat ../step3_pbcsetup.str | sed -e 's/ =//g'" ) );
$ga->tcpmessage( [ "_textarea" => "pbcsetup:\n$pbcsetup\n" ] );

## build prep files as in cg_namd_setup.pl

## all expected results, stage_inputs, stage_outputs
$expected_results = [
    "$cgbase/solmin/step3_input.somo_f_pa_c.pdb"
    ,"$cgbase/solmin_000.inp"
    ,"$cgbase/solmin/step3_input.somo_f_pa.pdb"
    ,"$cgbase/solmin_001.inp"
    ,"$cgbase/solmin/step3_input.somo_f_pbba_coc_000.pdb"
    ,"$cgbase/solmin_002.inp"
    ];

## solmin specific

$solmin_inputs = [
    "step3_input.pdb"
    ,"output/min1_f_pa_c.coor"
    ,"output/min1_f_pa.coor"
    ];
    
$solmin_outputs = [
    "output/min1_f_pa_c"
    ,"output/min1_f_pa"
    ,"output/min1_f_pbba_coc_000"
    ];

$solmin_jobs = [
    "solmin_000.inp"
    ,"solmin_001.inp"
    ,"solmin_002.inp"
    ];

$solmin_minimization_steps = [
    $input->minsteps_solv
    ,$input->minsteps_carb
    ,$input->minsteps_coci
    ];

$solmin_firsttimesteps = [
    0
    ,$input->minsteps_solv
    ,$input->minsteps_carb + $input->minsteps_solv
    ];

for ( $i = 1; $i < $input->cocrounds; ++$i ) {
    foreach ( [
                  sprintf( "$cgbase/solmin/step3_input.somo_f_pbba_coc_%s.pdb", str_pad( $i, 3, '0', STR_PAD_LEFT ) )
                  ,sprintf( "$cgbase/solmin_%s.inp", str_pad( $i + 2, 3, '0', STR_PAD_LEFT ) )
              ] as $expected_result ) {
        $expected_results[] = $expected_result;
    }
    $solmin_inputs[]             = sprintf( "output/min1_f_pbba_coc_%s.coor", str_pad( $i, 3, '0', STR_PAD_LEFT ) );
    $solmin_outputs[]            = sprintf( "output/min1_f_pbba_coc_%s", str_pad( $i + 1, 3, '0', STR_PAD_LEFT ) );
    $solmin_jobs[]               = sprintf( "solmin_%s", str_pad( $i + 2, 3, '0', STR_PAD_LEFT ) );
    $solmin_minimization_steps[] = $input->minsteps_coci;
    $solmin_firsttimesteps[]     = end( $solmin_firsttimesteps ) + $input->minsteps_coci;
}

## fix up final solmin steps
$solmin_minimization_steps[ array_key_last( $solmin_minimization_steps ) ] = $input->minsteps_final;

$ga->tcpmessage( [ "_textarea" =>
                   "expected_results:\n" . implode( "\n", $expected_results ) . "\n"
                   . "solmin_inputs:\n" . implode( "\n", $solmin_inputs ) . "\n"
                   . "solmin_outputs:\n" . implode( "\n", $solmin_outputs ) . "\n"
                   . "solmin_jobs:\n" . implode( "\n", $solmin_jobs ) . "\n"
                   . "solmin_minimization_steps:\n" . implode( "\n", $solmin_minimization_steps ) . "\n"
                   . "solmin_firsttimesteps:\n" . implode( "\n", $solmin_firsttimesteps ) . "\n"
                 ] );


$mdutils = "$selfd/mdutil";

### let's keep directories as in cg_namd_setup.pl for now, perhaps change later

$vacuumd  = "$cgbase/vacuumd";
$solmind  = "$cgbase/solmin";

if ( !mkdir_if_needed( $vacuumd ) ) {
    error_exit( "The directory <i>$vacuumd</i> could not be created.$msg_admin" );
    exit;
}

if ( !mkdir_if_needed( $solmind ) ) {
    error_exit( "The directory <i>$solmind</i> could not be created.$msg_admin" );
}

$refpdb_exists =
    isset( $cgstate->state->refpdb )
    && is_array( $cgstate->state->refpdb )
    && count( $cgstate->state->refpdb )
    ;
            
$cmds = [];

foreach ( [
              "cd $vacuumd && cp ../step3_input.pdb ."
              ,"cd $vacuumd && cp ../step3_input.psf ."
              ,"cd $vacuumd && $mdutils/pdbcutwi.pl step3_input.pdb"
              ,"cd $vacuumd && $mdutils/somopdb.pl step3_input.pdb"
    ] as $cmd ) {
    $cmds[] = $cmd;
}

if ( $refpdb_exists ) {
    $cmds[] = "cd $vacuumd && $mdutils/pdbhelixsheet.pl step3_input.somo.pdb " . $cgstate->state->refpdb[0];
}

foreach ( [
              "cd $vacuumd && $mdutils/restraints.pl step3_input.somo.pdb"
              ,"cd $vacuumd && $mdutils/restraintscoc.pl step3_input.somo.pdb $input->cocrounds"
              ,"cd $vacuumd && $mdutils/psfcut.pl step3_input.psf $maxatoms"
              ,"cd $solmind && cp ../step3_input.pdb ."
              ,"cd $solmind && cp ../step3_input.psf ."
              ,"cd $solmind && $mdutils/somopdb.pl step3_input.pdb"
          ] as $cmd ) {
    $cmds[] = $cmd;
}    

if ( $refpdb_exists ) {
    $cmds[] = "cd $solmind && $mdutils/pdbhelixsheet.pl step3_input.somo.pdb " . $cgstate->state->refpdb[0];
}
    
foreach( [
             "cd $solmind && $mdutils/restraints.pl step3_input.somo.pdb"
             ,"cd $solmind && $mdutils/restraintscoc.pl step3_input.somo.pdb $input->cocrounds"
         ] as $cmd ) {
    $cmds[] = $cmd;
}    


## $ga->tcpmessage( [ "_textarea" => "cmds:\n" . implode( "\n", $cmds ) . "\n" ] );


foreach ( $cmds as $cmd ) {
    $ga->tcpmessage( [ "_textarea" => "Running: $cmd\n" ] );
    $res = run_cmd( $cmd );
    $ga->tcpmessage( [ "_textarea" => "Output:\n$res\n" ] );
}

## verify expected results


$missing_results = [];
foreach ( $expected_results as $expected_result ) {
    if ( !file_exists( $expected_result ) ) {
        $missing_results[] = $expected_result;
    }
}

if ( count( $missing_results ) ) {
    error_exit( "There is some error, the following files were expected to be produced but were not found:<br>" . implode( "<br>", $missing_results ) );
}

$output->_textarea .= "\nPREPARE complete\n";

## save state

$cgstate->state->vacuum_ready = true;
$cgstate->state->solmin_ready = true;
$cgstate->state->maxatoms     = $maxatoms;
$cgstate->state->solmin_jobs  = $solmin_jobs;

if ( !$cgstate->save() ) {
    error_exit( "Save state failed:' . $cgstate->errors . '");
}

## log results to textarea

$output->{'_textarea'} = "JSON output from executable:\n" . json_encode( $output, JSON_PRETTY_PRINT ) . "\n";
$output->{'_textarea'} .= "JSON input from executable:\n"  . json_encode( $input, JSON_PRETTY_PRINT )  . "\n";

echo json_encode( $output );
